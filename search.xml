<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker入门</title>
      <link href="/2022/04/01/docker-ru-men/"/>
      <url>/2022/04/01/docker-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="docker入门"><a href="#docker入门" class="headerlink" title="docker入门"></a>docker入门</h1><h2 id="docker安装-centos为例"><a href="#docker安装-centos为例" class="headerlink" title="docker安装(centos为例)"></a>docker安装(centos为例)</h2><pre class="line-numbers language-none"><code class="language-none">1、移除以前docker相关包sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine 2、配置yum源  sudo yum install -y yum-utils    # 阿里云地址（国内地址，相对更快）  sudo yum-config-manager \--add-repo \http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo      3、安装docker sudo yum install -y docker-ce docker-ce-cli containerd.io #验证docker是否安装成功 docker version  4、启动docker service docker start systemctl start docker  5、设置docker开机自启 sudo systemctl enable docker  6、配置阿里镜像加速(个人仓库地址：https://cr.console.aliyun.com/cn-qingdao/instances/mirrors)    sudo mkdir -p /etc/docker    sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'    {      "registry-mirrors": ["https://79i9ue5l.mirror.aliyuncs.com"]    }    EOF    sudo systemctl daemon-reload    sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p><img src="/2022/04/01/docker-ru-men/image.png" alt="image"></p><p><img src="/2022/04/01/docker-ru-men/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220330133810.png" alt="image"></p><pre class="line-numbers language-none"><code class="language-none">1、查看docker的版本号，包括客户端、服务端docker version2、在docker中查找镜像docker search mysql(镜像名称)3、拉取镜像    docker pull nginx  #不指名版本，默认下载最新版    docker pull nginx:1.20.1    4、查看所有镜像docker images5、删除镜像/删除所有镜像docker rmi 镜像iddocker rmi docker images -q(先查询所有，再删)6、启动容器【docker run  设置项  镜像名】-i：表示运行容器-t：表示容器启动后会进入其命令行-d：后台运行--restart=always: 开机自启--name 为创建的容器命名-v 表示目录映射关系(覆盖) 即主机目录:容器中目录，目录挂载操作可能会出现权限不足的提示在docker run时 通过--privileged=true给该容器加权限来解决挂载的目录没有权限的问题-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口-e 为容器设置环境变量docker run --name=mynginx   -d  --restart=always -p  88:80   nginxdocker run -di -v /home/ruoyi/data:/usr/local/data --name centos7-01 centos:77、默认显示正在运行中的容器docker psdocker ps -a(包括未运行的)8、查看容器的日志docker logs 容器id9、开启/停止/重启容器docker start/stop/restart容器id/名字10、修改容器docker update 容器id/名字 --restart=alwaysdocker rename 原容器名称 现容器名称11、删除容器    docker rm  容器id/名字    docker rm -f mynginx   #强制删除正在运行中的    12、进入容器docker exec -it 容器id  /bin/bashexit（退出当前容器）13、将一个container固化为一个新的image，后面的repo:tag可选docker commit  [repo:tag]    14、 将镜像保存成压缩包/别的机器加载这个镜像docker save -o abc.tar mysqldocker load -i abc.tar15、docker镜像推送    # 把旧镜像的名字，改成仓库要求的新版名字    docker tag mysql:v1.0 lds/mysql:v1.0    # 登录到docker hub    docker login           docker logout（推送完成镜像后退出）    # 推送    docker push lds/mysql:v1.0    # 别的机器下载    docker pull lds/mysql:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker构建镜像-docker-commit"><a href="#docker构建镜像-docker-commit" class="headerlink" title="docker构建镜像(docker commit)"></a>docker构建镜像(docker commit)</h2><pre class="line-numbers language-none"><code class="language-none">docker commit：从容器创建一个新的镜像；通过基础镜像centos:7，在该镜像中安装jdk和tomcat以后将其制作为一个新的镜像mycentos:71、创建容器拉取镜像：docker pull centos:7创建容器：docker run -di --name centos7 centos:72、拷贝资源(将宿主机的 jdk 和 tomcat 拷贝至容器)    docker cp jdk-8u111-linux-x64.tar.gz centos7:/root    docker cp apache-tomcat-8.5.27.tar.gz centos7:/root    3、安装资源    # 进入容器    docker exec -it centos7 /bin/bash    # 切换至 /root 目录    cd root/    # 创建 java 和 tomcat 目录    mkdir -p /usr/local/java    mkdir -p /usr/local/tomcat    # 将 jdk 和 tomcat 解压至容器 /usr/local/java 和 /usr/local/tomcat 目录中    tar -zxvf jdk-8u111-linux-x64.tar.gz -C /usr/local/java/    tar -zxvf apache-tomcat-8.5.27.tar.gz -C /usr/local/tomcat/    # 配置 jdk 环境变量    vi /etc/profile    # 在环境变量文件中添加以下内容    export JAVA_HOME=/usr/local/java/jdk1.8.0_111/    export PATH=$PATH:$JAVA_HOME/bin    # 重新加载环境变量文件    source /etc/profile    # 测试环境变量是否配置成功    java -version    # 删除容器内 jdk 和 tomcat    rm jdk-8u111-linux-x64.tar.gz apache-tomcat-8.5.27.tar.gz -rf    4、构建镜像    docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]        -a：提交的镜像作者；        -c：使用 Dockerfile 指令来创建镜像；        -m：提交时的说明文字；        -p：在 commit 时，将容器暂停。    docker commit -a="ruoyi" -m="jdk8 and tomcat8" centos7 mycentos:7    5、使用构建的镜像创建容器    # 创建容器    docker run -di --name mycentos7 -p 8080:8080 mycentos:7# 进入容器    docker exec -it mycentos7 /bin/bash    # 重新加载配置文件    source /etc/profile    # 测试 java 环境变量    java -version    # 启动 tomcat    /usr/local/tomcat/apache-tomcat-8.5.27/bin/startup.sh    6、测试 访问http://{ip}:{port}，看到tomcat页面说明环境表示成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker构建镜像-docker-build"><a href="#docker构建镜像-docker-build" class="headerlink" title="docker构建镜像(docker build)"></a>docker构建镜像(docker build)</h2><pre class="line-numbers language-none"><code class="language-none">在Docker中构建镜像最常用的方式，就是使用Dockerfile。Dockerfile是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。Dockerfile文件编写好以后，真正构建镜像时需要通过docker build命令。docker build命令用于使用Dockerfile创建镜像1、构建镜像docker build -f /home/ruoyi/docker/Dockerfile -t lds/demo:latest      2、启动镜像     docker run -di --name mycentos -p 8080:8080 lds/demo:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">dockerfile案例## FROM，表示使用Jdk8环境为基础镜像，如果镜像不是本地的会从DockerHub进行下载FROM java:8# 当前镜像的维护者和联系方式MAINTAINER lds 951576458@qq.com# 挂载卷## VOLUME，VOLUME指向了一个/tmp的目录，由于Spring Boot使用内置的Tomcat容器，Tomcat默认使用/tmp作为工作目录。## 这个命令的效果是：在宿主机的/var/lib/docker目录下创建一个临时文件并把它链接到容器中的/tmp目录VOLUME /tmp# 将当前目录所有内容复制到容器的目录下,并修改了java包名称ADD /target/demo-0.0.1-SNAPSHOT.jar  demo.jar# 对容器外开放80端口#EXPOSE 8080#CMD java -Djava.security.egd=file:/dev/./urandom -jar /home/test/demo-0.0.1-SNAPSHOT.jar# 容器启动后需要执行的命令CMD ["java","-jar","demo.jar","-Dfile.encoding=utf-8"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="idea一键部署docker-方式1-配置"><a href="#idea一键部署docker-方式1-配置" class="headerlink" title="idea一键部署docker(方式1-配置)"></a>idea一键部署docker(方式1-配置)</h2><p>1、修改配置文件，打开2375端口<br>               vim /usr/lib/systemd/system/docker.service<br>               ExecStart=XXX后面加上-H tcp://0.0.0.0:2375 -H  unix://var/run/docker.sock<br>                安全组开放2375端口<br>               重新加载配置文件和启动：<br>               systemctl daemon-reload<br>               systemctl start docker<br>               用Telnet测试端口是否连通    </p><p><img src="/2022/04/01/docker-ru-men/docker%E9%85%8D%E7%BD%AE.png" alt="image"></p><p>2、idea的setting中配置docker信息</p><p><img src="/2022/04/01/docker-ru-men/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220331160455.png" alt="image"></p><p><img src="/2022/04/01/docker-ru-men/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220331160513.png" alt="image"></p><p>3、查看面板和配置dockerfile启动环境</p><p><img src="/2022/04/01/docker-ru-men/1648714246(1).jpg" alt="image"></p><p><img src="/2022/04/01/docker-ru-men/1648714060(1).jpg" alt="image"></p><p>4、运行dockerfile即可，</p><p>​      注意：重复运行每次都会产生None的镜像，是因为新的镜像顶替了老镜像，老镜像变为None，所以每次运行前需要先停止容器并删除老的镜像。</p><p><img src="/2022/04/01/docker-ru-men/1648715301(1).jpg" alt="image"></p><h2 id="idea一键部署docker-方式2-插件"><a href="#idea一键部署docker-方式2-插件" class="headerlink" title="idea一键部署docker(方式2-插件)"></a>idea一键部署docker(方式2-插件)</h2><p>1、定义插件内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--使用docker-maven-plugin插件--&gt;           &lt;plugin&gt;               &lt;groupId&gt;com.spotify&lt;/groupId&gt;               &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;               &lt;version&gt;1.0.0&lt;/version&gt;               &lt;!--将插件绑定在某个phase执行，可选择是否绑定--&gt;               &lt;executions&gt;                   &lt;execution&gt;                       &lt;id&gt;build-image&lt;/id&gt;                       &lt;!--用户只需执行mvn package ，就会自动执行mvn docker:build--&gt;                       &lt;phase&gt;package&lt;/phase&gt;                       &lt;goals&gt;                           &lt;goal&gt;build&lt;/goal&gt;                       &lt;/goals&gt;                   &lt;/execution&gt;               &lt;/executions&gt;               &lt;configuration&gt;                   &lt;!--指定生成的镜像名--&gt;                   &lt;imageName&gt;lds/${project.artifactId}&lt;/imageName&gt;                   &lt;!--指定标签--&gt;                   &lt;imageTags&gt;                       &lt;imageTag&gt;latest&lt;/imageTag&gt;                   &lt;/imageTags&gt;                   &lt;!-- 指定 Dockerfile 路径--&gt;                   &lt;dockerDirectory&gt;${project.basedir}&lt;/dockerDirectory&gt;                   &lt;!--指定远程 docker api地址--&gt;                   &lt;dockerHost&gt;http://119.45.19.7:2375&lt;/dockerHost&gt;                   &lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;                   &lt;resources&gt;                       &lt;resource&gt;                           &lt;targetPath&gt;/&lt;/targetPath&gt;                           &lt;!--jar 包所在的路径  此处配置的 即对应 target 目录--&gt;                           &lt;directory&gt;${project.build.directory}&lt;/directory&gt;                           &lt;!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　--&gt;                           &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;                       &lt;/resource&gt;                   &lt;/resources&gt;               &lt;/configuration&gt;           &lt;/plugin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用插件构建镜像</p><p>​    注意：maven打包前，需要先停止并删除正在执行的容器，删除原先的镜像。如果maven中的package指令绑定了docker build，只需要一步即可打包和创建镜像；如果没有指令绑定，需要执行maven中的package,然后执行docker中的build指令。</p><p><img src="/2022/04/01/docker-ru-men/1648715004(1).jpg" alt="image"></p><p>3、创建容器。（只需要创建一次，之后只需要重启即可）</p><p><img src="/2022/04/01/docker-ru-men/1648715301(1).jpg" alt="image"></p><p><img src="/2022/04/01/docker-ru-men/1648716331722.png" alt="image"></p><h2 id="docker安装nexus"><a href="#docker安装nexus" class="headerlink" title="docker安装nexus"></a>docker安装nexus</h2><pre class="line-numbers language-none"><code class="language-none">1、首先执行如下命令下载 Nexus3 镜像docker pull sonatype/nexus32、创建宿主机挂载目录mkdir –vp /usr/local/nexus-data3、运行 Nexus3 容器    docker run -d --name nexus3 -p 8081:8081 -v /usr/local/nexus-data:/var/nexus-data  \    --restart=always sonatype/nexus3    4、安全组开放8081端口5、通过 exec 命令对指定的容器执行 bash,查看 admin的密码    docker exec -it 550dd77a89e1 /bin/bash    vi /nexus-data/admin.password    exit    6、访问搭建的nexus后台管理页面 http://ip:8081，在nexus中添加阿里代理仓库，并移除原有的maven-center7、说明    maven-central：maven 中央库，默认从 https://repo1.maven.org/maven2/ 拉取 jar    maven-releases：私库发行版 jar，初次安装请将 Deployment policy 设置为 Allow redeploy    maven-snapshots：私库快照（调试版本）jar    maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker安装nacos"><a href="#docker安装nacos" class="headerlink" title="docker安装nacos"></a>docker安装nacos</h2><pre class="line-numbers language-none"><code class="language-none">1、拉取镜像docker pull nacos/nacos-server2、启动nacosdocker run --env MODE=standalone --name nacos -d -p 8848:8848 nacos/nacos-serverMODE=standalone表示单机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker安装nginx"><a href="#docker安装nginx" class="headerlink" title="docker安装nginx"></a>docker安装nginx</h2><pre class="line-numbers language-none"><code class="language-none">1、拉取镜像docker pull nginx2、挂载nginx配置文件创建目录：mkdir -p /home/ruoyi/nginx将容器内的配置文件拷贝到指定目录：docker cp nginx:/etc/nginx /home/ruoyi/nginx/conf3、创建Nginx容器docker run -di --name nginx -p 80:80 -v /home/ruoyi/nginx/conf:/etc/nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h2><pre class="line-numbers language-none"><code class="language-none">1、拉取镜像docker pull mysql:5.72、挂载mysql配置、日志和数据文件创建文件：mkdir -p /home/mysql/data /home/mysql/logs /home/mysql/conf3、创建容器，将数据、日志、配置文件映射到本机docker run -p 3306:3306 --name mysql -v /home/mysql/conf:/etc/mysql/conf.d -v \       /home/mysql/logs:/logs -v /home/mysql/data:/var/lib/mysql \    -e MYSQL_ROOT_PASSWORD=password -d mysql:5.7    4、进入容器/执行命令docker exec -it mysql /bin/bash    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker安装redis"><a href="#docker安装redis" class="headerlink" title="docker安装redis"></a>docker安装redis</h2><pre class="line-numbers language-none"><code class="language-none">1、拉取镜像docker pull redis2、启动容器docker run -di --name redis -p 6379:6379 redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Centos </tag>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门</title>
      <link href="/2022/04/01/git-ru-men/"/>
      <url>/2022/04/01/git-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="git入门"><a href="#git入门" class="headerlink" title="git入门"></a>git入门</h1><h2 id="git配置命令"><a href="#git配置命令" class="headerlink" title="git配置命令"></a>git配置命令</h2><pre class="line-numbers language-none"><code class="language-none">1、配置全局的用户名和邮箱  git config --global user.name "15939011994"git config --global user.email "951576458@qq.com"2、针对单个仓库配置用户名和邮箱 git config user.name "fmy" git config user.email "201723115@stu.ncwu.edu.cn" 3、查看git所有配置信息 git config --list 4、查看配置的用户名或密码git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将本地新建的项目提交到远程仓库"><a href="#将本地新建的项目提交到远程仓库" class="headerlink" title="将本地新建的项目提交到远程仓库"></a>将本地新建的项目提交到远程仓库</h2><p><img src="/2022/04/01/git-ru-men/1414675-20181021141754594-1897748047.png" alt="image"></p><pre class="line-numbers language-none"><code class="language-none">1、初始化本地仓库git init2、将本地内容添加至git本地暂存区中/将暂存区的文件删除    git add 文件名    git rm --cached 文件名     3、将暂存区添加至本地仓库中  git commit -m "日志信息" 文件名  4、添加远程仓库路径  git remote add origin https://github.com/gybguohao/test.git  5、将本地内容push至远程仓库中  git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-none"><code class="language-none">1、查看本地库中代码状态git status2、查看版本信息/查看版本详细信息git refloggit log3、回退版本git reset 回退版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h2><pre class="line-numbers language-none"><code class="language-none">1、查看分支git branch/git branch -v2、添加分支git branch test    3、切换分支 git checkout test   4、删除分支 git branch -d test 5、合并分支   git merge dev (如果当前是master分支，需要合并dev分支)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git远程库操作"><a href="#git远程库操作" class="headerlink" title="git远程库操作"></a>git远程库操作</h2><p><img src="/2022/04/01/git-ru-men/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220326164509.png" alt="image"></p><pre class="line-numbers language-none"><code class="language-none">工作区：用来编辑保存项目文件的地方，也是用户能直接操作到的地方。暂存区：保存了下次将提交的文件列表信息，一般在 Git 仓库目录中，是一个叫index的文件，通常多数说法还是叫暂存区域；版本库：也叫本地版本库，之所以说git 快，是因为它是分布式版本控制系统，大部分提交都是对本地仓库而言的，不依赖网络，最后一次会推送的到远程仓库。1、管理远程仓库(remote)        查看关联的远程仓库的名称：git remote        查看关联的远程仓库的详细信息：git remote -v        添加远程仓库的关联：git remote add origin &lt;远程仓库地址&gt;        删除远程仓库的关联：git remote remove &lt;远程仓库名称&gt;        修改远程仓库的关联：git remote set-url origin &lt;新的远程仓库地址&gt;        更新远程仓库的分支：git remote update origin --prune        2、将本地仓库的更新推送到远程仓库上(push)推送到远程仓库上: git push origin master/git push origin删除远程dev分支: git push origin --delete dev3、获取远程仓库的更新(pull)取回远程仓库上的dev分支与本地的master分支合并：git pull origin dev:master取回远程仓库上的dev分支与当前分支合并：git pull origin dev4、克隆(clone)git clone 链接url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="centos7搭建GitLab"><a href="#centos7搭建GitLab" class="headerlink" title="centos7搭建GitLab"></a>centos7搭建GitLab</h2><pre class="line-numbers language-none"><code class="language-none">官网地址：https://about.gitlab.cn/install/1、在 CentOS 7上，下面的命令也会在系统防火墙中打开 HTTP、HTTPS 和 SSH 访问（可选）    sudo yum install -y curl policycoreutils-python openssh-server perl    sudo systemctl enable sshd    sudo systemctl start sshd    sudo firewall-cmd --permanent --add-service=http    sudo firewall-cmd --permanent --add-service=https    sudo systemctl reload firewalld    sudo firewall-cmd --permanent --add-service=http    sudo firewall-cmd --permanent --add-service=https    sudo systemctl reload firewalld2、 安装 Postfix 以发送电子邮件通知（可选）    sudo yum install postfix    sudo systemctl enable postfix    sudo systemctl start postfix3、下载GitLab 安装包wget https://omnibus.gitlab.cn/el/7/gitlab-jh-14.9.0-jh.0.el7.x86_64.rpm4、安装安装包sudo rpm -Uvh gitlab-jh-14.9.0-jh.0.el7.x86_64.rpm5、初始化Gitlab服务  gitlab-ctl reconfigure（直到最后一行出现 gitlab Reconfigured）6、启动gitlab服务gitlab-ctl start7、访问gitlab/查看超级管理员的初始化密码直接通过ip地址就可以访问，默认走的是80端口cat /etc/gitlab/initial_root_password注意： 1、如果注册新用户，需要超级管理员在后台审核 2、克隆项目时如果没有权限，需要在该项目中邀请成员，加入该项目组后，才可以对项目进行操作。8、关闭gitlab服务gitlab-ctl stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> GitLab </tag>
            
            <tag> Gitee </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
